// Generated by `npm run compile`
(function () {
  return function () {
    const NUM_DISPLAY_MODES = 0;
    const ROPE_OFFSET = 0;

    const FreeSans9pt7bBitmaps = new Uint8Array([
      0xff,
      0xff,
      0xf8,
      0xc0,
      0xde,
      0xf7,
      0x20,
      0x09,
      0x86,
      0x41,
      0x91,
      0xff,
      0x13,
      0x04,
      0xc3,
      0x20,
      0xc8,
      0xff,
      0x89,
      0x82,
      0x61,
      0x90,
      0x10,
      0x1f,
      0x14,
      0xda,
      0x3d,
      0x1e,
      0x83,
      0x40,
      0x78,
      0x17,
      0x08,
      0xf4,
      0x7a,
      0x35,
      0x33,
      0xf0,
      0x40,
      0x20,
      0x38,
      0x10,
      0xec,
      0x20,
      0xc6,
      0x20,
      0xc6,
      0x40,
      0xc6,
      0x40,
      0x6c,
      0x80,
      0x39,
      0x00,
      0x01,
      0x3c,
      0x02,
      0x77,
      0x02,
      0x63,
      0x04,
      0x63,
      0x04,
      0x77,
      0x08,
      0x3c,
      0x0e,
      0x06,
      0x60,
      0xcc,
      0x19,
      0x81,
      0xe0,
      0x18,
      0x0f,
      0x03,
      0x36,
      0xc2,
      0xd8,
      0x73,
      0x06,
      0x31,
      0xe3,
      0xc4,
      0xfe,
      0x13,
      0x26,
      0x6c,
      0xcc,
      0xcc,
      0xc4,
      0x66,
      0x23,
      0x10,
      0x8c,
      0x46,
      0x63,
      0x33,
      0x33,
      0x32,
      0x66,
      0x4c,
      0x80,
      0x25,
      0x7e,
      0xa5,
      0x00,
      0x30,
      0xc3,
      0x3f,
      0x30,
      0xc3,
      0x0c,
      0xd6,
      0xf0,
      0xc0,
      0x08,
      0x44,
      0x21,
      0x10,
      0x84,
      0x42,
      0x11,
      0x08,
      0x00,
      0x3c,
      0x66,
      0x42,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0x42,
      0x66,
      0x3c,
      0x11,
      0x3f,
      0x33,
      0x33,
      0x33,
      0x33,
      0x30,
      0x3e,
      0x31,
      0xb0,
      0x78,
      0x30,
      0x18,
      0x1c,
      0x1c,
      0x1c,
      0x18,
      0x18,
      0x10,
      0x08,
      0x07,
      0xf8,
      0x3c,
      0x66,
      0xc3,
      0xc3,
      0x03,
      0x06,
      0x1c,
      0x07,
      0x03,
      0xc3,
      0xc3,
      0x66,
      0x3c,
      0x0c,
      0x18,
      0x71,
      0x62,
      0xc9,
      0xa3,
      0x46,
      0xfe,
      0x18,
      0x30,
      0x60,
      0xc0,
      0x7f,
      0x20,
      0x10,
      0x08,
      0x08,
      0x07,
      0xf3,
      0x8c,
      0x03,
      0x01,
      0x80,
      0xf0,
      0x6c,
      0x63,
      0xe0,
      0x1e,
      0x31,
      0x98,
      0x78,
      0x0c,
      0x06,
      0xf3,
      0x8d,
      0x83,
      0xc1,
      0xe0,
      0xd0,
      0x6c,
      0x63,
      0xe0,
      0xff,
      0x03,
      0x02,
      0x06,
      0x04,
      0x0c,
      0x08,
      0x18,
      0x18,
      0x18,
      0x10,
      0x30,
      0x30,
      0x3e,
      0x31,
      0xb0,
      0x78,
      0x3c,
      0x1b,
      0x18,
      0xf8,
      0xc6,
      0xc1,
      0xe0,
      0xf0,
      0x6c,
      0x63,
      0xe0,
      0x3c,
      0x66,
      0xc2,
      0xc3,
      0xc3,
      0xc3,
      0x67,
      0x3b,
      0x03,
      0x03,
      0xc2,
      0x66,
      0x3c,
      0xc0,
      0x00,
      0x30,
      0xc0,
      0x00,
      0x00,
      0x64,
      0xa0,
      0x00,
      0x81,
      0xc7,
      0x8e,
      0x0c,
      0x07,
      0x80,
      0x70,
      0x0e,
      0x01,
      0x80,
      0xff,
      0x80,
      0x00,
      0x1f,
      0xf0,
      0x00,
      0x70,
      0x0e,
      0x01,
      0xc0,
      0x18,
      0x38,
      0x71,
      0xc0,
      0x80,
      0x00,
      0x3e,
      0x31,
      0xb0,
      0x78,
      0x30,
      0x18,
      0x18,
      0x38,
      0x18,
      0x18,
      0x0c,
      0x00,
      0x00,
      0x01,
      0x80,
      0x03,
      0xf0,
      0x06,
      0x0e,
      0x06,
      0x01,
      0x86,
      0x00,
      0x66,
      0x1d,
      0xbb,
      0x31,
      0xcf,
      0x18,
      0xc7,
      0x98,
      0x63,
      0xcc,
      0x31,
      0xe6,
      0x11,
      0xb3,
      0x99,
      0xcc,
      0xf7,
      0x86,
      0x00,
      0x01,
      0x80,
      0x00,
      0x70,
      0x40,
      0x0f,
      0xe0,
      0x06,
      0x00,
      0xf0,
      0x0f,
      0x00,
      0x90,
      0x19,
      0x81,
      0x98,
      0x10,
      0x83,
      0x0c,
      0x3f,
      0xc2,
      0x04,
      0x60,
      0x66,
      0x06,
      0xc0,
      0x30,
      0xff,
      0x18,
      0x33,
      0x03,
      0x60,
      0x6c,
      0x0d,
      0x83,
      0x3f,
      0xc6,
      0x06,
      0xc0,
      0x78,
      0x0f,
      0x01,
      0xe0,
      0x6f,
      0xf8,
      0x1f,
      0x86,
      0x19,
      0x81,
      0xa0,
      0x3c,
      0x01,
      0x80,
      0x30,
      0x06,
      0x00,
      0xc0,
      0x68,
      0x0d,
      0x83,
      0x18,
      0x61,
      0xf0,
      0xff,
      0x18,
      0x33,
      0x03,
      0x60,
      0x3c,
      0x07,
      0x80,
      0xf0,
      0x1e,
      0x03,
      0xc0,
      0x78,
      0x0f,
      0x03,
      0x60,
      0xcf,
      0xf0,
      0xff,
      0xe0,
      0x30,
      0x18,
      0x0c,
      0x06,
      0x03,
      0xfd,
      0x80,
      0xc0,
      0x60,
      0x30,
      0x18,
      0x0f,
      0xf8,
      0xff,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xfe,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0x0f,
      0x83,
      0x0e,
      0x60,
      0x66,
      0x03,
      0xc0,
      0x0c,
      0x00,
      0xc1,
      0xfc,
      0x03,
      0xc0,
      0x36,
      0x03,
      0x60,
      0x73,
      0x0f,
      0x0f,
      0x10,
      0xc0,
      0x78,
      0x0f,
      0x01,
      0xe0,
      0x3c,
      0x07,
      0x80,
      0xff,
      0xfe,
      0x03,
      0xc0,
      0x78,
      0x0f,
      0x01,
      0xe0,
      0x3c,
      0x06,
      0xff,
      0xff,
      0xff,
      0xc0,
      0x06,
      0x0c,
      0x18,
      0x30,
      0x60,
      0xc1,
      0x83,
      0x07,
      0x8f,
      0x1e,
      0x27,
      0x80,
      0xc0,
      0xd8,
      0x33,
      0x0c,
      0x63,
      0x0c,
      0xc1,
      0xb8,
      0x3f,
      0x07,
      0x30,
      0xc3,
      0x18,
      0x63,
      0x06,
      0x60,
      0x6c,
      0x0c,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xff,
      0xe0,
      0x3f,
      0x01,
      0xfc,
      0x1f,
      0xe0,
      0xfd,
      0x05,
      0xec,
      0x6f,
      0x63,
      0x79,
      0x13,
      0xcd,
      0x9e,
      0x6c,
      0xf1,
      0x47,
      0x8e,
      0x3c,
      0x71,
      0x80,
      0xe0,
      0x7c,
      0x0f,
      0xc1,
      0xe8,
      0x3d,
      0x87,
      0x98,
      0xf1,
      0x1e,
      0x33,
      0xc3,
      0x78,
      0x6f,
      0x07,
      0xe0,
      0x7c,
      0x0e,
      0x0f,
      0x81,
      0x83,
      0x18,
      0x0c,
      0xc0,
      0x6c,
      0x01,
      0xe0,
      0x0f,
      0x00,
      0x78,
      0x03,
      0xc0,
      0x1b,
      0x01,
      0x98,
      0x0c,
      0x60,
      0xc0,
      0xf8,
      0x00,
      0xff,
      0x30,
      0x6c,
      0x0f,
      0x03,
      0xc0,
      0xf0,
      0x6f,
      0xf3,
      0x00,
      0xc0,
      0x30,
      0x0c,
      0x03,
      0x00,
      0xc0,
      0x00,
      0x0f,
      0x81,
      0x83,
      0x18,
      0x0c,
      0xc0,
      0x6c,
      0x01,
      0xe0,
      0x0f,
      0x00,
      0x78,
      0x03,
      0xc0,
      0x1b,
      0x01,
      0x98,
      0x6c,
      0x60,
      0xc0,
      0xfb,
      0x00,
      0x08,
      0xff,
      0x8c,
      0x0e,
      0xc0,
      0x6c,
      0x06,
      0xc0,
      0x6c,
      0x0c,
      0xff,
      0x8c,
      0x0e,
      0xc0,
      0x6c,
      0x06,
      0xc0,
      0x6c,
      0x06,
      0xc0,
      0x70,
      0x3f,
      0x18,
      0x6c,
      0x0f,
      0x03,
      0xc0,
      0x1e,
      0x01,
      0xf0,
      0x0e,
      0x00,
      0xf0,
      0x3c,
      0x0d,
      0x86,
      0x3f,
      0x00,
      0xff,
      0x86,
      0x03,
      0x01,
      0x80,
      0xc0,
      0x60,
      0x30,
      0x18,
      0x0c,
      0x06,
      0x03,
      0x01,
      0x80,
      0xc0,
      0xc0,
      0x78,
      0x0f,
      0x01,
      0xe0,
      0x3c,
      0x07,
      0x80,
      0xf0,
      0x1e,
      0x03,
      0xc0,
      0x78,
      0x0f,
      0x01,
      0xb0,
      0x61,
      0xf0,
      0xc0,
      0x6c,
      0x0d,
      0x81,
      0x10,
      0x63,
      0x0c,
      0x61,
      0x04,
      0x60,
      0xcc,
      0x19,
      0x01,
      0x60,
      0x3c,
      0x07,
      0x00,
      0x60,
      0xc1,
      0x81,
      0x30,
      0xe1,
      0x98,
      0x70,
      0xcc,
      0x28,
      0x66,
      0x26,
      0x21,
      0x13,
      0x30,
      0xc8,
      0x98,
      0x6c,
      0x4c,
      0x14,
      0x34,
      0x0a,
      0x1a,
      0x07,
      0x07,
      0x03,
      0x03,
      0x80,
      0x81,
      0x80,
      0x60,
      0x63,
      0x0c,
      0x30,
      0xc1,
      0x98,
      0x0f,
      0x00,
      0xe0,
      0x06,
      0x00,
      0xf0,
      0x19,
      0x01,
      0x98,
      0x30,
      0xc6,
      0x0e,
      0x60,
      0x60,
      0xc0,
      0x36,
      0x06,
      0x30,
      0xc3,
      0x0c,
      0x19,
      0x81,
      0xd8,
      0x0f,
      0x00,
      0x60,
      0x06,
      0x00,
      0x60,
      0x06,
      0x00,
      0x60,
      0x06,
      0x00,
      0xff,
      0xc0,
      0x60,
      0x30,
      0x0c,
      0x06,
      0x03,
      0x01,
      0xc0,
      0x60,
      0x30,
      0x18,
      0x06,
      0x03,
      0x00,
      0xff,
      0xc0,
      0xfb,
      0x6d,
      0xb6,
      0xdb,
      0x6d,
      0xb6,
      0xe0,
      0x84,
      0x10,
      0x84,
      0x10,
      0x84,
      0x10,
      0x84,
      0x10,
      0x80,
      0xed,
      0xb6,
      0xdb,
      0x6d,
      0xb6,
      0xdb,
      0xe0,
      0x30,
      0x60,
      0xa2,
      0x44,
      0xd8,
      0xa1,
      0x80,
      0xff,
      0xc0,
      0xc6,
      0x30,
      0x7e,
      0x71,
      0xb0,
      0xc0,
      0x60,
      0xf3,
      0xdb,
      0x0d,
      0x86,
      0xc7,
      0x3d,
      0xc0,
      0xc0,
      0x60,
      0x30,
      0x1b,
      0xce,
      0x36,
      0x0f,
      0x07,
      0x83,
      0xc1,
      0xe0,
      0xf0,
      0x7c,
      0x6d,
      0xe0,
      0x3c,
      0x66,
      0xc3,
      0xc0,
      0xc0,
      0xc0,
      0xc0,
      0xc3,
      0x66,
      0x3c,
      0x03,
      0x03,
      0x03,
      0x3b,
      0x67,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0x67,
      0x3b,
      0x3c,
      0x66,
      0xc3,
      0xc3,
      0xff,
      0xc0,
      0xc0,
      0xc3,
      0x66,
      0x3c,
      0x36,
      0x6f,
      0x66,
      0x66,
      0x66,
      0x66,
      0x60,
      0x3b,
      0x67,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0x67,
      0x3b,
      0x03,
      0x03,
      0xc6,
      0x7c,
      0xc0,
      0xc0,
      0xc0,
      0xde,
      0xe3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xff,
      0xff,
      0xc0,
      0x30,
      0x03,
      0x33,
      0x33,
      0x33,
      0x33,
      0x33,
      0x33,
      0xe0,
      0xc0,
      0x60,
      0x30,
      0x18,
      0x4c,
      0x46,
      0x63,
      0x61,
      0xf0,
      0xec,
      0x62,
      0x31,
      0x98,
      0x6c,
      0x30,
      0xff,
      0xff,
      0xff,
      0xc0,
      0xde,
      0xf7,
      0x1c,
      0xf0,
      0xc7,
      0x86,
      0x3c,
      0x31,
      0xe1,
      0x8f,
      0x0c,
      0x78,
      0x63,
      0xc3,
      0x1e,
      0x18,
      0xc0,
      0xde,
      0xe3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0x3c,
      0x66,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0x66,
      0x3c,
      0xde,
      0x71,
      0xb0,
      0x78,
      0x3c,
      0x1e,
      0x0f,
      0x07,
      0x83,
      0xe3,
      0x6f,
      0x30,
      0x18,
      0x0c,
      0x00,
      0x3b,
      0x67,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0x67,
      0x3b,
      0x03,
      0x03,
      0x03,
      0xdf,
      0x31,
      0x8c,
      0x63,
      0x18,
      0xc6,
      0x00,
      0x3e,
      0xe3,
      0xc0,
      0xc0,
      0xe0,
      0x3c,
      0x07,
      0xc3,
      0xe3,
      0x7e,
      0x66,
      0xf6,
      0x66,
      0x66,
      0x66,
      0x67,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc3,
      0xc7,
      0x7b,
      0xc1,
      0xa0,
      0x98,
      0xcc,
      0x42,
      0x21,
      0xb0,
      0xd0,
      0x28,
      0x1c,
      0x0c,
      0x00,
      0xc6,
      0x1e,
      0x38,
      0x91,
      0xc4,
      0xca,
      0x66,
      0xd3,
      0x16,
      0xd0,
      0xa6,
      0x87,
      0x1c,
      0x38,
      0xc0,
      0xc6,
      0x00,
      0x43,
      0x62,
      0x36,
      0x1c,
      0x18,
      0x1c,
      0x3c,
      0x26,
      0x62,
      0x43,
      0xc1,
      0x21,
      0x98,
      0xcc,
      0x42,
      0x61,
      0xb0,
      0xd0,
      0x38,
      0x1c,
      0x0c,
      0x06,
      0x03,
      0x01,
      0x03,
      0x00,
      0xfe,
      0x0c,
      0x30,
      0xc1,
      0x86,
      0x18,
      0x20,
      0xc1,
      0xfc,
      0x36,
      0x66,
      0x66,
      0x6e,
      0xce,
      0x66,
      0x66,
      0x66,
      0x30,
      0xff,
      0xff,
      0xff,
      0xff,
      0xc0,
      0xc6,
      0x66,
      0x66,
      0x67,
      0x37,
      0x66,
      0x66,
      0x66,
      0xc0,
      0x61,
      0x24,
      0x38,
    ]);
    const FreeSans9pt7bGlyphs = [
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
      [STRUCT],
    ];
    const FreeSans9pt7b = STRUCT;
    const COLOR_SET = 0;
    const COLOR_ADD = 1;
    const COLOR_BLEND = 2;
    const MODE_HSV = 1;
    const MODE_RGB = 2;
    let r_mult = 255;
    let g_mult = 255;
    let b_mult = 255;
    function blend(amount, a, b) {
      let af = a / 255.0;
      let bf = b / 255.0;
      return uint8(255 * sqrt((1 - amount) * af * af + amount * bf * bf));
    }
    function rgb(pixel, r, g, b, mode) {
      let position = (ROPE_OFFSET + pixel) * 3;
      if (mode == COLOR_SET) {
        ledBuffer[position + 1] = r;
        ledBuffer[position + 0] = g;
        ledBuffer[position + 2] = b;
        return;
      }
      let oR = ledBuffer[position + 1];
      let oG = ledBuffer[position + 0];
      let oB = ledBuffer[position + 2];
      if (mode == COLOR_ADD) {
        let maxPrev = max(oR, max(oG, oB));
        let maxNow = max(r, max(g, b));
        if (maxNow + maxPrev > 255) {
          let scale = (255.0 - maxNow) / 255;
          oR = uint8(oR * scale);
          oG = uint8(oG * scale);
          oB = uint8(oB * scale);
        }
        r = uint8(r + oR);
        g = uint8(g + oG);
        b = uint8(b + oB);
      } else if (mode == COLOR_BLEND) {
        r = blend(0.5, oR, r);
        g = blend(0.5, oG, g);
        b = blend(0.5, oB, b);
      }
      ledBuffer[position + 1] = r;
      ledBuffer[position + 0] = g;
      ledBuffer[position + 2] = b;
    }
    function hsv(pixel, hue, sat, val, mode) {
      val = gamma8[uint8(val)];
      sat = 255 - gamma8[255 - uint8(sat)];
      let base;
      if (sat == 0) {
        rgb(pixel, val, val, val, mode);
      } else {
        base = Math.floor(((255 - sat) * val) >> 8);
        switch (Math.floor(hue / 60)) {
          case 0:
            return rgb(
              pixel,
              val,
              ((val - base) * hue) / 60 + base,
              base,
              mode
            );
          case 1:
            return rgb(
              pixel,
              ((val - base) * (60 - (hue % 60))) / 60 + base,
              val,
              base,
              mode
            );
          case 2:
            return rgb(
              pixel,
              base,
              val,
              ((val - base) * (hue % 60)) / 60 + base,
              mode
            );
          case 3:
            return rgb(
              pixel,
              base,
              ((val - base) * (60 - (hue % 60))) / 60 + base,
              val,
              mode
            );
          case 4:
            return rgb(
              pixel,
              ((val - base) * (hue % 60)) / 60 + base,
              base,
              val,
              mode
            );
          case 5:
            return rgb(
              pixel,
              val,
              base,
              ((val - base) * (60 - (hue % 60))) / 60 + base,
              mode
            );
        }
      }
    }
    function rope_fade(amount) {
      for (let k = 0; k < ROPE_LEDS * 3; k++) {
        ledBuffer[k] = ledBuffer[k] > amount ? ledBuffer[k] - amount : 0;
      }
    }
    function rope_rgb(r, g, b) {
      for (let k = 0; k < ROPE_LEDS; k++) {
        rgb(k, r, g, b);
      }
    }
    function rope_hsv(hue, sat, val) {
      for (let k = 0; k < ROPE_LEDS; k++) {
        hsv(k, hue, sat, val);
      }
    }
    function mult_rgb(r, g, b) {
      r_mult = r;
      g_mult = g;
      b_mult = b;
    }
    const ringCount = 8;
    const ringSize = new Uint8Array([60, 52, 44, 36, 28, 20, 12, 4]);
    const ringStart = new Uint8Array([0, 60, 112, 156, 192, 220, 240, 252]);
    const ringIndexOffset = 115;
    const ringIndex = new Uint8Array([
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      47,
      48,
      79,
      80,
      111,
      112,
      143,
      144,
      175,
      176,
      207,
      208,
      239,
      240,
      241,
      242,
      243,
      244,
      245,
      246,
      247,
      248,
      249,
      250,
      251,
      252,
      253,
      254,
      255,
      224,
      223,
      192,
      191,
      160,
      159,
      128,
      127,
      96,
      95,
      64,
      63,
      32,
      31,
      30,
      29,
      28,
      27,
      26,
      25,
      24,
      23,
      22,
      21,
      20,
      19,
      18,
      17,
      46,
      49,
      78,
      81,
      110,
      113,
      142,
      145,
      174,
      177,
      206,
      209,
      238,
      237,
      236,
      235,
      234,
      233,
      232,
      231,
      230,
      229,
      228,
      227,
      226,
      225,
      222,
      193,
      190,
      161,
      158,
      129,
      126,
      97,
      94,
      65,
      62,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      50,
      77,
      82,
      109,
      114,
      141,
      146,
      173,
      178,
      205,
      210,
      211,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      219,
      220,
      221,
      194,
      189,
      162,
      157,
      130,
      125,
      98,
      93,
      66,
      61,
      60,
      59,
      58,
      57,
      56,
      55,
      54,
      53,
      52,
      51,
      76,
      83,
      108,
      115,
      140,
      147,
      172,
      179,
      204,
      203,
      202,
      201,
      200,
      199,
      198,
      197,
      196,
      195,
      188,
      163,
      156,
      131,
      124,
      99,
      92,
      67,
      68,
      69,
      70,
      71,
      72,
      73,
      74,
      75,
      84,
      107,
      116,
      139,
      148,
      171,
      180,
      181,
      182,
      183,
      184,
      185,
      186,
      187,
      164,
      155,
      132,
      123,
      100,
      91,
      90,
      89,
      88,
      87,
      86,
      85,
      106,
      117,
      138,
      149,
      170,
      169,
      168,
      167,
      166,
      165,
      154,
      133,
      122,
      101,
      102,
      103,
      104,
      105,
      118,
      137,
      150,
      151,
      152,
      153,
      134,
      121,
      120,
      119,
      136,
      135,
    ]);
    let lastTime = 0;
    let state = 0;
    const OFF = 0;
    const SCHEDULED = 1;
    const BLOCK = 2;
    const FADE = 3;
    let animation = OFF;
    function showRing(ring) {
      for (let k = ringStart[ring]; k < ringStart[ring] + ringSize[ring]; k++) {
        let index = ringIndexOffset + ringIndex[k];
        let colorIndex = ring + index + Math.floor(state / 150);
        rgb(index, 16 * (colorIndex % 16), 0, 0);
      }
    }
    function ringHSV(ring, h, s, v) {
      for (let k = ringStart[ring]; k < ringStart[ring] + ringSize[ring]; k++) {
        let index = ringIndexOffset + ringIndex[k];
        hsv(index, h, s, v);
      }
    }
    function loop() {
      let now = millis();
      state += now - lastTime;
      lastTime = now;
      for (let k = 0; k < ringCount; k++) {
        ringHSV(k, (k * 30 + Math.floor(state / 10)) % 360, 255, 255);
      }
      strip.show();
      return;
      if (animation == OFF) {
        strip.clear();
      } else {
        rope_fade(1);
        mult_rgb(96, 96, 96);
      }
      if (animation == BLOCK) {
        let ring = Math.floor(state / 1000);
        if (ring >= ringCount) {
          animation = FADE;
        } else {
          showRing(ringCount - ring - 1);
        }
      } else if (animation == SCHEDULED) {
        showRing(ringCount - 1);
      }
      strip.show();
    }
    function madeAttest(event, data) {
      if (animation == OFF) {
        animation = FADE;
      }
      hsv(random(ROPE_LEDS), random(360), 255, 255);
    }
    function madeBlock(event, data) {
      animation = BLOCK;
      state = 0;
    }
    function scheduledBlock(event, data) {
      animation = SCHEDULED;
      state = 0;
    }
    function setup() {
      strip.begin();
      strip.show();
      ledBuffer = strip.getPixels();
      Particle.subscribe("eth2/attest", madeAttest);
      Particle.subscribe("eth2/block", madeBlock);
      Particle.subscribe("eth2/scheduled", scheduledBlock);
      animation = BLOCK;
      state = 0;
    }
    function message(msg) {
      {
      }
    }
    function render_mode() {}

    return { setup, loop, message };
  };
})();
